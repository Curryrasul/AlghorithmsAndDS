// Сортировка подсчетом

// Сортировку подсчетом целесообразно использовать, когда диапазон 
// значений в сортируемом массиве небольшой: например каждый элемент массива принадлежит множеству цифр. 
// Суть сортировки : мы создаем доп массив (инициализируя его нулями) от 0 до k, где k - это
// максимальное значение в диапазоне (поэтому в данной сортировке желательно знать с какими числами
// предстоит работать). Дальше мы проходим по главному массиву, и видя очередное число , в доп массиве 
// элемент с индексом данного числа, увеличиваем на единицу. А затем проходим по второму массиву
// и выводим значения a[i] раз. Сложность алгоритма Θ(n + k). Алгоритм устойчив (важно)
// В этом примере будет приведен пример сортировки массива, состоящего из чисел от 0 до 9

void countSort(int *arr, int len) {
    // Заполняем массив "цифр" нулями
    int temp[10] = {0};

    // Проходим по главному массиву и считаем сколько раз
    // встречается каждая цифра
    for (int i = 0; i < len; i++) {
        temp[arr[i]] += 1;
    }

    // Доп переменная для прохода по основому массиву
    int position = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < temp[i]; j++) {
            arr[position] = i;
            position++;
        }
    }
}